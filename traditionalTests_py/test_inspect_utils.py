# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import inspect as module_0
import inspect_utils as module_1
import re as module_2


def test_case_0():
    int_0 = -2972
    var_0 = module_0.iscoroutinefunction(int_0)
    var_1 = module_1.isnamedtuple(var_0)
    assert var_1 is False


def test_case_1():
    none_type_0 = None
    var_0 = module_1.islambda(none_type_0)
    var_1 = module_1.islambda(none_type_0)
    with pytest.raises(TypeError):
        module_0.getclosurevars(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_1.isbuiltin(none_type_0)
    assert var_0 is True
    module_1.getqualifiedname(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 2389.63
    var_0 = module_1.isconstructor(float_0)
    assert var_0 is False
    module_1.getqualifiedname(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_1.getimmediatesource(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    var_0 = module_1.isbuiltin(none_type_0)
    assert var_0 is True
    str_0 = "H_\n^_>zKP84e-^$hf3"
    module_1.getmethodclass(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2.purge()
    var_1 = module_1.getfutureimports(var_0)
    none_type_0 = None
    module_1.getdefiningclass(none_type_0, none_type_0)
