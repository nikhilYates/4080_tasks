# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import cache as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    code_object_cache_0 = module_0.CodeObjectCache()
    var_0 = code_object_cache_0.__len__()
    code_object_cache_1 = module_0.CodeObjectCache()
    var_1 = code_object_cache_0.__len__()
    var_2 = code_object_cache_1.__getitem__(code_object_cache_0)
    assert len(code_object_cache_1) == 1
    var_3 = code_object_cache_0.has(code_object_cache_1, var_1)
    assert var_3 is False
    var_2.__hash__()


@pytest.mark.xfail(strict=True)
def test_case_1():
    code_object_cache_0 = module_0.CodeObjectCache()
    code_object_cache_1 = module_0.CodeObjectCache()
    var_0 = code_object_cache_1.__getitem__(code_object_cache_1)
    assert len(code_object_cache_1) == 1
    code_object_cache_1.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    unbound_instance_cache_0 = module_0.UnboundInstanceCache()
    none_type_0 = None
    code_object_cache_0 = module_0.CodeObjectCache()
    unbound_instance_cache_0.__getitem__(none_type_0)


def test_case_3():
    code_object_cache_0 = module_0.CodeObjectCache()


@pytest.mark.xfail(strict=True)
def test_case_4():
    transformed_fn_cache_0 = module_0._TransformedFnCache()
    assert (
        f"{type(transformed_fn_cache_0).__module__}.{type(transformed_fn_cache_0).__qualname__}"
        == "cache._TransformedFnCache"
    )
    assert len(transformed_fn_cache_0) == 0
    transformed_fn_cache_1 = module_0._TransformedFnCache()
    unbound_instance_cache_0 = module_0.UnboundInstanceCache()
    unbound_instance_cache_1 = module_0.UnboundInstanceCache()
    transformed_fn_cache_1.has(transformed_fn_cache_1, unbound_instance_cache_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    transformed_fn_cache_0 = module_0._TransformedFnCache()
    assert (
        f"{type(transformed_fn_cache_0).__module__}.{type(transformed_fn_cache_0).__qualname__}"
        == "cache._TransformedFnCache"
    )
    assert len(transformed_fn_cache_0) == 0
    var_0 = transformed_fn_cache_0.__len__()
    var_0.__copy__()
